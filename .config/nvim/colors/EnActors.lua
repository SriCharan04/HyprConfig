-- Neovim colorscheme template for Material You themes
-- Generated by matugen

local M = {}

-- Color definitions from Material You palette
local colors = {
  -- Surface colors
  background = "#171216",
  surface = "#171216",
  surface_variant = "#4e444b",
  surface_container = "#241e22",
  surface_container_low = "#201a1e",
  surface_container_high = "#2f282d",
  surface_container_highest = "#3a3337",
  surface_dim = "#171216",
  surface_bright = "#3e373c",
  
  -- On-surface colors
  on_background = "#ecdfe5",
  on_surface = "#ecdfe5",
  on_surface_variant = "#d1c2cb",
  
  -- Primary colors
  primary = "#f2b3e5",
  on_primary = "#4c1f48",
  primary_container = "#663560",
  on_primary_container = "#ffd7f4",
  primary_fixed = "#ffd7f4",
  primary_fixed_dim = "#f2b3e5",
  on_primary_fixed = "#340831",
  on_primary_fixed_variant = "#663560",
  
  -- Secondary colors
  secondary = "#dbbfd2",
  on_secondary = "#3d2b39",
  secondary_container = "#554050",
  on_secondary_container = "#f8daee",
  secondary_fixed = "#f8daee",
  secondary_fixed_dim = "#dbbfd2",
  on_secondary_fixed = "#271624",
  on_secondary_fixed_variant = "#554050",
  
  -- Tertiary colors
  tertiary = "#f5b8a6",
  on_tertiary = "#4c261a",
  tertiary_container = "#663c2e",
  on_tertiary_container = "#ffdbd0",
  tertiary_fixed = "#ffdbd0",
  tertiary_fixed_dim = "#f5b8a6",
  on_tertiary_fixed = "#321207",
  on_tertiary_fixed_variant = "#663c2e",
  
  -- Error colors
  error = "#ffb4ab",
  on_error = "#690005",
  error_container = "#93000a",
  on_error_container = "#ffdad6",
  
  -- Outline and utility colors
  outline = "#9a8d95",
  outline_variant = "#4e444b",
  scrim = "#000000",
  shadow = "#000000",
  surface_tint = "#f2b3e5",
  
  -- Inverse colors
  inverse_surface = "#ecdfe5",
  inverse_on_surface = "#352e33",
  inverse_primary = "#804d78",
}

function M.setup()
  -- Clear existing highlights
  vim.cmd('highlight clear')
  if vim.fn.exists('syntax_on') then
    vim.cmd('syntax reset')
  end

  vim.o.termguicolors = true
  vim.g.colors_name = 'matugen-material'

  -- Editor UI highlights
  local highlights = {
    -- Basic editor
    Normal = { fg = colors.on_surface, bg = colors.surface },
    NormalFloat = { fg = colors.on_surface, bg = colors.surface_container },
    NormalNC = { fg = colors.on_surface_variant, bg = colors.surface_dim },
    
    -- Cursor and visual
    Cursor = { fg = colors.on_primary, bg = colors.primary },
    lCursor = { fg = colors.on_primary, bg = colors.primary },
    CursorIM = { fg = colors.on_secondary, bg = colors.secondary },
    TermCursor = { fg = colors.on_primary, bg = colors.primary },
    TermCursorNC = { fg = colors.on_primary_container, bg = colors.primary_container },
    
    Visual = { bg = colors.primary_container },
    VisualNOS = { bg = colors.secondary_container },
    
    -- Lines and columns
    CursorLine = { bg = colors.surface_container_low },
    CursorColumn = { bg = colors.surface_container_low },
    ColorColumn = { bg = colors.surface_container },
    
    -- Line numbers
    LineNr = { fg = colors.outline },
    CursorLineNr = { fg = colors.primary, bold = true },
    LineNrAbove = { fg = colors.outline_variant },
    LineNrBelow = { fg = colors.outline_variant },
    
    -- Folds
    Folded = { fg = colors.on_surface_variant, bg = colors.surface_container },
    FoldColumn = { fg = colors.outline, bg = colors.surface },
    
    -- Sign column
    SignColumn = { fg = colors.outline, bg = colors.surface },
    
    -- Search
    Search = { fg = colors.on_tertiary, bg = colors.tertiary },
    IncSearch = { fg = colors.on_primary, bg = colors.primary },
    CurSearch = { fg = colors.on_primary, bg = colors.primary },
    
    -- Splits and separators
    VertSplit = { fg = colors.outline_variant },
    WinSeparator = { fg = colors.outline_variant },
    
    -- Status line
    StatusLine = { fg = colors.on_surface, bg = colors.surface_container },
    StatusLineNC = { fg = colors.on_surface_variant, bg = colors.surface_container_low },
    
    -- Tab line
    TabLine = { fg = colors.on_surface_variant, bg = colors.surface_container },
    TabLineFill = { bg = colors.surface },
    TabLineSel = { fg = colors.on_primary_container, bg = colors.primary_container },
    
    -- Popup menu
    Pmenu = { fg = colors.on_surface, bg = colors.surface_container },
    PmenuSel = { fg = colors.on_primary_container, bg = colors.primary_container },
    PmenuSbar = { bg = colors.surface_container_high },
    PmenuThumb = { bg = colors.outline },
    PmenuKind = { fg = colors.secondary },
    PmenuKindSel = { fg = colors.on_secondary_container, bg = colors.secondary_container },
    PmenuExtra = { fg = colors.on_surface_variant },
    PmenuExtraSel = { fg = colors.on_surface_variant },
    
    -- Wild menu
    WildMenu = { fg = colors.on_primary, bg = colors.primary },
    
    -- Messages
    ModeMsg = { fg = colors.primary },
    MoreMsg = { fg = colors.tertiary },
    MsgArea = { fg = colors.on_surface },
    MsgSeparator = { fg = colors.outline_variant, bg = colors.surface_container },
    
    -- Questions and prompts
    Question = { fg = colors.secondary },
    
    -- Warnings and errors
    WarningMsg = { fg = colors.tertiary },
    ErrorMsg = { fg = colors.error },
    
    -- Spell checking
    SpellBad = { sp = colors.error, undercurl = true },
    SpellCap = { sp = colors.secondary, undercurl = true },
    SpellLocal = { sp = colors.tertiary, undercurl = true },
    SpellRare = { sp = colors.outline, undercurl = true },
    
    -- Directory and special files
    Directory = { fg = colors.primary },
    
    -- Titles and special text
    Title = { fg = colors.primary, bold = true },
    
    -- Concealed text
    Conceal = { fg = colors.outline },
    
    -- End of buffer
    EndOfBuffer = { fg = colors.surface },
    
    -- Non-text characters
    NonText = { fg = colors.outline_variant },
    SpecialKey = { fg = colors.outline },
    Whitespace = { fg = colors.outline_variant },
    
    -- Syntax highlighting
    Comment = { fg = colors.outline, italic = true },
    
    Constant = { fg = colors.secondary },
    String = { fg = colors.tertiary },
    Character = { fg = colors.tertiary_fixed },
    Number = { fg = colors.secondary_fixed },
    Boolean = { fg = colors.secondary, bold = true },
    Float = { fg = colors.secondary_fixed },
    
    Identifier = { fg = colors.on_surface },
    Function = { fg = colors.primary },
    
    Statement = { fg = colors.primary, bold = true },
    Conditional = { fg = colors.primary },
    Repeat = { fg = colors.primary },
    Label = { fg = colors.primary },
    Operator = { fg = colors.on_surface_variant },
    Keyword = { fg = colors.primary, bold = true },
    Exception = { fg = colors.error },
    
    PreProc = { fg = colors.tertiary },
    Include = { fg = colors.tertiary },
    Define = { fg = colors.tertiary },
    Macro = { fg = colors.tertiary },
    PreCondit = { fg = colors.tertiary },
    
    Type = { fg = colors.secondary },
    StorageClass = { fg = colors.secondary },
    Structure = { fg = colors.secondary },
    Typedef = { fg = colors.secondary },
    
    Special = { fg = colors.tertiary_fixed_dim },
    SpecialChar = { fg = colors.tertiary_fixed_dim },
    Tag = { fg = colors.primary },
    Delimiter = { fg = colors.on_surface_variant },
    SpecialComment = { fg = colors.outline, italic = true },
    Debug = { fg = colors.error },
    
    Underlined = { fg = colors.primary, underline = true },
    Ignore = { fg = colors.outline },
    Error = { fg = colors.on_error, bg = colors.error },
    Todo = { fg = colors.on_tertiary_container, bg = colors.tertiary_container, bold = true },
    
    -- Tree-sitter groups
    ['@comment'] = { link = 'Comment' },
    ['@comment.documentation'] = { fg = colors.outline, italic = true },
    ['@comment.error'] = { fg = colors.error },
    ['@comment.warning'] = { fg = colors.tertiary },
    ['@comment.todo'] = { fg = colors.on_tertiary_container, bg = colors.tertiary_container },
    ['@comment.note'] = { fg = colors.primary },
    
    ['@constant'] = { link = 'Constant' },
    ['@constant.builtin'] = { fg = colors.secondary, bold = true },
    ['@constant.macro'] = { fg = colors.tertiary },
    
    ['@string'] = { link = 'String' },
    ['@string.documentation'] = { fg = colors.tertiary, italic = true },
    ['@string.regexp'] = { fg = colors.tertiary_fixed },
    ['@string.escape'] = { fg = colors.secondary_fixed },
    ['@string.special'] = { fg = colors.tertiary_fixed_dim },
    ['@string.special.symbol'] = { fg = colors.secondary },
    ['@string.special.url'] = { fg = colors.primary, underline = true },
    ['@string.special.path'] = { fg = colors.tertiary },
    
    ['@character'] = { link = 'Character' },
    ['@character.special'] = { fg = colors.tertiary_fixed_dim },
    
    ['@number'] = { link = 'Number' },
    ['@number.float'] = { link = 'Float' },
    
    ['@boolean'] = { link = 'Boolean' },
    
    ['@function'] = { link = 'Function' },
    ['@function.builtin'] = { fg = colors.primary, bold = true },
    ['@function.call'] = { fg = colors.primary },
    ['@function.macro'] = { fg = colors.tertiary },
    ['@function.method'] = { fg = colors.primary },
    ['@function.method.call'] = { fg = colors.primary },
    
    ['@constructor'] = { fg = colors.secondary },
    
    ['@parameter'] = { fg = colors.on_surface_variant },
    ['@parameter.builtin'] = { fg = colors.outline, italic = true },
    
    ['@keyword'] = { link = 'Keyword' },
    ['@keyword.function'] = { fg = colors.primary },
    ['@keyword.operator'] = { fg = colors.primary },
    ['@keyword.import'] = { fg = colors.tertiary },
    ['@keyword.storage'] = { fg = colors.secondary },
    ['@keyword.repeat'] = { fg = colors.primary },
    ['@keyword.return'] = { fg = colors.primary, bold = true },
    ['@keyword.debug'] = { fg = colors.error },
    ['@keyword.exception'] = { fg = colors.error },
    ['@keyword.conditional'] = { fg = colors.primary },
    ['@keyword.conditional.ternary'] = { fg = colors.primary },
    ['@keyword.directive'] = { fg = colors.tertiary },
    ['@keyword.directive.define'] = { fg = colors.tertiary },
    
    ['@operator'] = { link = 'Operator' },
    
    ['@punctuation.delimiter'] = { fg = colors.on_surface_variant },
    ['@punctuation.bracket'] = { fg = colors.on_surface_variant },
    ['@punctuation.special'] = { fg = colors.tertiary_fixed_dim },
    
    ['@variable'] = { fg = colors.on_surface },
    ['@variable.builtin'] = { fg = colors.secondary, italic = true },
    ['@variable.parameter'] = { fg = colors.on_surface_variant },
    ['@variable.member'] = { fg = colors.on_surface_variant },
    
    ['@property'] = { fg = colors.on_surface_variant },
    
    ['@field'] = { fg = colors.on_surface_variant },
    
    ['@type'] = { link = 'Type' },
    ['@type.builtin'] = { fg = colors.secondary, bold = true },
    ['@type.definition'] = { fg = colors.secondary },
    ['@type.qualifier'] = { fg = colors.secondary },
    
    ['@namespace'] = { fg = colors.secondary },
    ['@symbol'] = { fg = colors.secondary },
    
    ['@tag'] = { fg = colors.primary },
    ['@tag.attribute'] = { fg = colors.secondary },
    ['@tag.delimiter'] = { fg = colors.on_surface_variant },
    
    ['@markup.strong'] = { bold = true },
    ['@markup.italic'] = { italic = true },
    ['@markup.strikethrough'] = { strikethrough = true },
    ['@markup.underline'] = { underline = true },
    ['@markup.heading'] = { fg = colors.primary, bold = true },
    ['@markup.quote'] = { fg = colors.outline, italic = true },
    ['@markup.math'] = { fg = colors.tertiary },
    ['@markup.environment'] = { fg = colors.secondary },
    ['@markup.environment.name'] = { fg = colors.secondary },
    ['@markup.link'] = { fg = colors.primary, underline = true },
    ['@markup.link.label'] = { fg = colors.primary },
    ['@markup.link.url'] = { fg = colors.primary, underline = true },
    ['@markup.raw'] = { fg = colors.tertiary },
    ['@markup.raw.block'] = { fg = colors.tertiary },
    ['@markup.list'] = { fg = colors.primary },
    ['@markup.list.checked'] = { fg = colors.tertiary },
    ['@markup.list.unchecked'] = { fg = colors.outline },
    
    -- LSP Semantic tokens
    ['@lsp.type.class'] = { link = '@type' },
    ['@lsp.type.comment'] = { link = '@comment' },
    ['@lsp.type.decorator'] = { fg = colors.tertiary },
    ['@lsp.type.enum'] = { link = '@type' },
    ['@lsp.type.enumMember'] = { link = '@constant' },
    ['@lsp.type.function'] = { link = '@function' },
    ['@lsp.type.interface'] = { link = '@type' },
    ['@lsp.type.keyword'] = { link = '@keyword' },
    ['@lsp.type.macro'] = { link = '@constant.macro' },
    ['@lsp.type.method'] = { link = '@function.method' },
    ['@lsp.type.namespace'] = { link = '@namespace' },
    ['@lsp.type.parameter'] = { link = '@parameter' },
    ['@lsp.type.property'] = { link = '@property' },
    ['@lsp.type.struct'] = { link = '@type' },
    ['@lsp.type.type'] = { link = '@type' },
    ['@lsp.type.typeParameter'] = { link = '@type' },
    ['@lsp.type.variable'] = { link = '@variable' },
    
    -- Diagnostics
    DiagnosticError = { fg = colors.error },
    DiagnosticWarn = { fg = colors.tertiary },
    DiagnosticInfo = { fg = colors.primary },
    DiagnosticHint = { fg = colors.outline },
    DiagnosticOk = { fg = colors.tertiary_container },
    
    DiagnosticVirtualTextError = { fg = colors.error, bg = colors.error_container },
    DiagnosticVirtualTextWarn = { fg = colors.tertiary, bg = colors.tertiary_container },
    DiagnosticVirtualTextInfo = { fg = colors.primary, bg = colors.primary_container },
    DiagnosticVirtualTextHint = { fg = colors.outline, bg = colors.surface_container },
    DiagnosticVirtualTextOk = { fg = colors.tertiary_container, bg = colors.surface_container },
    
    DiagnosticUnderlineError = { sp = colors.error, undercurl = true },
    DiagnosticUnderlineWarn = { sp = colors.tertiary, undercurl = true },
    DiagnosticUnderlineInfo = { sp = colors.primary, undercurl = true },
    DiagnosticUnderlineHint = { sp = colors.outline, undercurl = true },
    DiagnosticUnderlineOk = { sp = colors.tertiary_container, undercurl = true },
    
    -- LSP highlights
    LspReferenceText = { bg = colors.surface_container },
    LspReferenceRead = { bg = colors.surface_container },
    LspReferenceWrite = { bg = colors.surface_container_high },
    
    LspSignatureActiveParameter = { bg = colors.primary_container, bold = true },
    LspCodeLens = { fg = colors.outline, italic = true },
    LspCodeLensSeparator = { fg = colors.outline_variant },
    
    -- Git diff
    DiffAdd = { fg = colors.on_tertiary_container, bg = colors.tertiary_container },
    DiffChange = { fg = colors.on_secondary_container, bg = colors.secondary_container },
    DiffDelete = { fg = colors.on_error_container, bg = colors.error_container },
    DiffText = { fg = colors.on_primary_container, bg = colors.primary_container, bold = true },
    
    -- Git signs
    GitSignsAdd = { fg = colors.tertiary },
    GitSignsChange = { fg = colors.secondary },
    GitSignsDelete = { fg = colors.error },
    GitSignsAddNr = { fg = colors.tertiary },
    GitSignsChangeNr = { fg = colors.secondary },
    GitSignsDeleteNr = { fg = colors.error },
    GitSignsAddLn = { bg = colors.tertiary_container },
    GitSignsChangeLn = { bg = colors.secondary_container },
    GitSignsDeleteLn = { bg = colors.error_container },
    
    -- Floating windows
    FloatBorder = { fg = colors.outline_variant, bg = colors.surface_container },
    FloatTitle = { fg = colors.primary, bg = colors.surface_container, bold = true },
    
    -- Which-key
    WhichKey = { fg = colors.primary },
    WhichKeyGroup = { fg = colors.secondary },
    WhichKeyDesc = { fg = colors.on_surface },
    WhichKeySeperator = { fg = colors.outline },
    WhichKeySeparator = { fg = colors.outline },
    WhichKeyFloat = { bg = colors.surface_container },
    WhichKeyValue = { fg = colors.tertiary },
    
    -- Telescope
    TelescopeBorder = { fg = colors.outline_variant, bg = colors.surface_container },
    TelescopeNormal = { fg = colors.on_surface, bg = colors.surface_container },
    TelescopePromptBorder = { fg = colors.primary, bg = colors.surface_container },
    TelescopePromptNormal = { fg = colors.on_surface, bg = colors.surface_container },
    TelescopePromptPrefix = { fg = colors.primary },
    TelescopeSelection = { fg = colors.on_primary_container, bg = colors.primary_container },
    TelescopeSelectionCaret = { fg = colors.primary },
    TelescopeMultiSelection = { fg = colors.on_secondary_container, bg = colors.secondary_container },
    TelescopeMatching = { fg = colors.primary, bold = true },
    TelescopePromptCounter = { fg = colors.outline },
    
    -- Neo-tree
    NeoTreeNormal = { fg = colors.on_surface, bg = colors.surface_container_low },
    NeoTreeNormalNC = { fg = colors.on_surface, bg = colors.surface_container_low },
    NeoTreeDirectoryName = { fg = colors.primary },
    NeoTreeDirectoryIcon = { fg = colors.primary },
    NeoTreeRootName = { fg = colors.primary, bold = true },
    NeoTreeFileName = { fg = colors.on_surface },
    NeoTreeFileIcon = { fg = colors.on_surface_variant },
    NeoTreeFileNameOpened = { fg = colors.primary },
    NeoTreeIndentMarker = { fg = colors.outline_variant },
    NeoTreeExpander = { fg = colors.outline },
    NeoTreeModified = { fg = colors.tertiary },
    NeoTreeGitAdded = { fg = colors.tertiary },
    NeoTreeGitConflict = { fg = colors.error },
    NeoTreeGitDeleted = { fg = colors.error },
    NeoTreeGitIgnored = { fg = colors.outline },
    NeoTreeGitModified = { fg = colors.secondary },
    NeoTreeGitUnstaged = { fg = colors.secondary },
    NeoTreeGitUntracked = { fg = colors.tertiary },
    NeoTreeGitStaged = { fg = colors.tertiary },
    
    -- Nvim-tree
    NvimTreeNormal = { fg = colors.on_surface, bg = colors.surface_container_low },
    NvimTreeNormalNC = { fg = colors.on_surface, bg = colors.surface_container_low },
    NvimTreeRootFolder = { fg = colors.primary, bold = true },
    NvimTreeFolderName = { fg = colors.primary },
    NvimTreeFolderIcon = { fg = colors.primary },
    NvimTreeEmptyFolderName = { fg = colors.outline },
    NvimTreeOpenedFolderName = { fg = colors.primary, bold = true },
    NvimTreeExecFile = { fg = colors.tertiary, bold = true },
    NvimTreeOpenedFile = { fg = colors.primary },
    NvimTreeSpecialFile = { fg = colors.secondary, underline = true },
    NvimTreeImageFile = { fg = colors.tertiary },
    NvimTreeMarkdownFile = { fg = colors.primary },
    NvimTreeIndentMarker = { fg = colors.outline_variant },
    NvimTreeGitDirty = { fg = colors.secondary },
    NvimTreeGitStaged = { fg = colors.tertiary },
    NvimTreeGitMerge = { fg = colors.error },
    NvimTreeGitRenamed = { fg = colors.tertiary },
    NvimTreeGitNew = { fg = colors.tertiary },
    NvimTreeGitDeleted = { fg = colors.error },
    NvimTreeGitIgnored = { fg = colors.outline },
    
    -- Alpha (dashboard)
    AlphaShortcut = { fg = colors.primary },
    AlphaHeader = { fg = colors.primary },
    AlphaHeaderLabel = { fg = colors.secondary },
    AlphaFooter = { fg = colors.outline },
    AlphaButtons = { fg = colors.on_surface },
    
    -- Noice
    NoicePopup = { fg = colors.on_surface, bg = colors.surface_container },
    NoicePopupBorder = { fg = colors.outline_variant, bg = colors.surface_container },
    NoiceCmdlinePopup = { fg = colors.on_surface, bg = colors.surface_container },
    NoiceCmdlinePopupBorder = { fg = colors.outline_variant, bg = colors.surface_container },
    NoiceCmdlineIcon = { fg = colors.primary },
    NoiceConfirm = { fg = colors.on_tertiary_container, bg = colors.tertiary_container },
    NoiceConfirmBorder = { fg = colors.tertiary, bg = colors.tertiary_container },
    
    -- Notify
    NotifyERRORBorder = { fg = colors.error },
    NotifyWARNBorder = { fg = colors.tertiary },
    NotifyINFOBorder = { fg = colors.primary },
    NotifyDEBUGBorder = { fg = colors.outline },
    NotifyTRACEBorder = { fg = colors.outline_variant },
    NotifyERRORIcon = { fg = colors.error },
    NotifyWARNIcon = { fg = colors.tertiary },
    NotifyINFOIcon = { fg = colors.primary },
    NotifyDEBUGIcon = { fg = colors.outline },
    NotifyTRACEIcon = { fg = colors.outline_variant },
    NotifyERRORTitle = { fg = colors.error },
    NotifyWARNTitle = { fg = colors.tertiary },
    NotifyINFOTitle = { fg = colors.primary },
    NotifyDEBUGTitle = { fg = colors.outline },
    NotifyTRACETitle = { fg = colors.outline_variant },
    NotifyERRORBody = { fg = colors.on_surface },
    NotifyWARNBody = { fg = colors.on_surface },
    NotifyINFOBody = { fg = colors.on_surface },
    NotifyDEBUGBody = { fg = colors.on_surface },
    NotifyTRACEBody = { fg = colors.on_surface },
    
    -- Mini.nvim
    MiniCompletionActiveParameter = { underline = true },
    MiniCursorword = { bg = colors.surface_container },
    MiniCursorwordCurrent = { bg = colors.surface_container },
    MiniIndentscopeSymbol = { fg = colors.primary },
    MiniIndentscopePrefix = { nocombine = true },
    MiniJump = { bg = colors.primary, fg = colors.on_primary },
    MiniJump2dSpot = { fg = colors.error, bold = true, nocombine = true },
    MiniJump2dSpotAhead = { fg = colors.tertiary, bold = true, nocombine = true },
    MiniJump2dSpotUnique = { fg = colors.primary, bold = true, nocombine = true },
    MiniStarterCurrent = { nocombine = true },
    MiniStarterFooter = { fg = colors.outline, italic = true },
    MiniStarterHeader = { fg = colors.primary },
    MiniStarterInactive = { fg = colors.outline, italic = true },
    MiniStarterItem = { fg = colors.on_surface },
    MiniStarterItemBullet = { fg = colors.outline_variant },
    MiniStarterItemPrefix = { fg = colors.tertiary },
    MiniStarterSection = { fg = colors.secondary },
    MiniStarterQuery = { fg = colors.primary },
    MiniStatuslineDevinfo = { fg = colors.on_surface_variant, bg = colors.surface_container },
    MiniStatuslineFileinfo = { fg = colors.on_surface_variant, bg = colors.surface_container },
    MiniStatuslineFilename = { fg = colors.on_surface, bg = colors.surface_container_low },
    MiniStatuslineInactive = { fg = colors.outline, bg = colors.surface },
    MiniStatuslineModeCommand = { fg = colors.on_secondary, bg = colors.secondary, bold = true },
    MiniStatuslineModeInsert = { fg = colors.on_tertiary, bg = colors.tertiary, bold = true },
    MiniStatuslineModeNormal = { fg = colors.on_primary, bg = colors.primary, bold = true },
    MiniStatuslineModeOther = { fg = colors.on_surface, bg = colors.surface_container, bold = true },
    MiniStatuslineModeReplace = { fg = colors.on_error, bg = colors.error, bold = true },
    MiniStatuslineModeVisual = { fg = colors.on_primary_container, bg = colors.primary_container, bold = true },
    MiniSurround = { bg = colors.primary, fg = colors.on_primary },
    MiniTablineCurrent = { fg = colors.on_primary_container, bg = colors.primary_container, bold = true },
    MiniTablineFill = { bg = colors.surface },
    MiniTablineHidden = { fg = colors.on_surface_variant, bg = colors.surface_container },
    MiniTablineModifiedCurrent = { fg = colors.tertiary, bg = colors.primary_container, bold = true },
    MiniTablineModifiedHidden = { fg = colors.tertiary, bg = colors.surface_container },
    MiniTablineModifiedVisible = { fg = colors.tertiary, bg = colors.surface_container_high },
    MiniTablineTabpagesection = { fg = colors.on_primary, bg = colors.primary, bold = true },
    MiniTablineVisible = { fg = colors.on_surface, bg = colors.surface_container_high },
    MiniTestEmphasis = { bold = true },
    MiniTestFail = { fg = colors.error, bold = true },
    MiniTestPass = { fg = colors.tertiary, bold = true },
    MiniTrailspace = { bg = colors.error },
    
    -- Gitsigns
    GitSignsCurrentLineBlame = { fg = colors.outline, italic = true },
    
    -- Leap
    LeapMatch = { bg = colors.primary, fg = colors.on_primary, bold = true },
    LeapLabelPrimary = { bg = colors.primary, fg = colors.on_primary, bold = true },
    LeapLabelSecondary = { bg = colors.secondary, fg = colors.on_secondary, bold = true },
    LeapBackdrop = { fg = colors.outline },
    
    -- Flash
    FlashBackdrop = { fg = colors.outline },
    FlashMatch = { bg = colors.primary, fg = colors.on_primary },
    FlashCurrent = { bg = colors.secondary, fg = colors.on_secondary },
    FlashLabel = { bg = colors.tertiary, fg = colors.on_tertiary, bold = true },
    FlashPrompt = { bg = colors.surface_container, fg = colors.on_surface },
    FlashPromptIcon = { fg = colors.primary },
    FlashCursor = { reverse = true },
    
    -- Trouble
    TroubleText = { fg = colors.on_surface },
    TroubleCount = { fg = colors.primary, bg = colors.primary_container },
    TroubleNormal = { fg = colors.on_surface, bg = colors.surface_container_low },
    
    -- Illuminate
    IlluminatedWordText = { bg = colors.surface_container },
    IlluminatedWordRead = { bg = colors.surface_container },
    IlluminatedWordWrite = { bg = colors.surface_container_high },
    
    -- diff
    diffAdded = { fg = colors.tertiary },
    diffRemoved = { fg = colors.error },
    diffChanged = { fg = colors.secondary },
    diffOldFile = { fg = colors.error },
    diffNewFile = { fg = colors.tertiary },
    diffFile = { fg = colors.primary },
    diffLine = { fg = colors.outline },
    diffIndexLine = { fg = colors.primary },
    
    -- Neogit
    NeogitBranch = { fg = colors.primary },
    NeogitRemote = { fg = colors.secondary },
    NeogitHunkHeader = { fg = colors.on_surface, bg = colors.surface_container },
    NeogitHunkHeaderHighlight = { fg = colors.on_primary_container, bg = colors.primary_container },
    NeogitDiffContextHighlight = { bg = colors.surface_container_low },
    NeogitDiffDeleteHighlight = { fg = colors.error, bg = colors.error_container },
    NeogitDiffAddHighlight = { fg = colors.tertiary, bg = colors.tertiary_container },
    NeogitNotificationInfo = { fg = colors.primary },
    NeogitNotificationWarning = { fg = colors.tertiary },
    NeogitNotificationError = { fg = colors.error },
    
    -- GitConflict
    GitConflictCurrent = { bg = colors.primary_container },
    GitConflictIncoming = { bg = colors.secondary_container },
    GitConflictAncestor = { bg = colors.tertiary_container },
    GitConflictCurrentLabel = { fg = colors.on_primary_container, bg = colors.primary_container },
    GitConflictIncomingLabel = { fg = colors.on_secondary_container, bg = colors.secondary_container },
    GitConflictAncestorLabel = { fg = colors.on_tertiary_container, bg = colors.tertiary_container },
    
    -- indent-blankline
    IblIndent = { fg = colors.outline_variant, nocombine = true },
    IblScope = { fg = colors.primary, nocombine = true },
    
    -- aerial
    AerialLine = { bg = colors.primary_container },
    AerialGuide = { fg = colors.outline_variant },
    
    -- neotest
    NeotestPassed = { fg = colors.tertiary },
    NeotestRunning = { fg = colors.secondary },
    NeotestFailed = { fg = colors.error },
    NeotestSkipped = { fg = colors.outline },
    NeotestTest = { fg = colors.on_surface },
    NeotestNamespace = { fg = colors.primary },
    NeotestFocused = { fg = colors.on_primary, bg = colors.primary },
    NeotestFile = { fg = colors.secondary },
    NeotestDir = { fg = colors.primary },
    NeotestBorder = { fg = colors.outline_variant },
    NeotestIndent = { fg = colors.outline_variant },
    NeotestExpandMarker = { fg = colors.outline },
    NeotestAdapterName = { fg = colors.tertiary, bold = true },
    NeotestWinSelect = { fg = colors.primary, bold = true },
    NeotestMarked = { fg = colors.secondary, bold = true },
    NeotestTarget = { fg = colors.primary },
    
    -- nvim-dap
    DapStoppedLine = { default = true, link = 'Visual' },
    
    -- nvim-dap-ui
    DapUIVariable = { fg = colors.on_surface },
    DapUIScope = { fg = colors.primary },
    DapUIType = { fg = colors.secondary },
    DapUIValue = { fg = colors.on_surface },
    DapUIModifiedValue = { fg = colors.tertiary, bold = true },
    DapUIDecoration = { fg = colors.primary },
    DapUIThread = { fg = colors.tertiary },
    DapUIStoppedThread = { fg = colors.primary },
    DapUIFrameName = { fg = colors.on_surface },
    DapUISource = { fg = colors.secondary },
    DapUILineNumber = { fg = colors.primary },
    DapUIFloatBorder = { fg = colors.outline_variant },
    DapUIWatchesEmpty = { fg = colors.error },
    DapUIWatchesValue = { fg = colors.tertiary },
    DapUIWatchesError = { fg = colors.error },
    DapUIBreakpointsPath = { fg = colors.primary },
    DapUIBreakpointsInfo = { fg = colors.tertiary },
    DapUIBreakpointsCurrentLine = { fg = colors.tertiary, bold = true },
    DapUIBreakpointsLine = { fg = colors.primary },
    DapUIBreakpointsDisabledLine = { fg = colors.outline },
    
    -- Hop
    HopNextKey = { fg = colors.primary, bold = true },
    HopNextKey1 = { fg = colors.secondary, bold = true },
    HopNextKey2 = { fg = colors.tertiary },
    HopUnmatched = { fg = colors.outline },
    
    -- Lightspeed
    LightspeedGreyWash = { fg = colors.outline },
    LightspeedCursor = { link = 'Cursor' },
    LightspeedLabel = { fg = colors.primary, bold = true, underline = true },
    LightspeedLabelDistant = { fg = colors.secondary, bold = true, underline = true },
    LightspeedLabelDistantOverlapped = { fg = colors.tertiary, underline = true },
    LightspeedLabelOverlapped = { fg = colors.primary, underline = true },
    LightspeedMaskedChar = { fg = colors.outline },
    LightspeedOneCharMatch = { bg = colors.primary, fg = colors.on_primary, bold = true },
    LightspeedPendingOpArea = { bg = colors.primary, fg = colors.on_primary },
    LightspeedShort = { bg = colors.primary, fg = colors.on_primary, bold = true },
    LightspeedShortCut = { bg = colors.secondary, fg = colors.on_secondary, bold = true },
    LightspeedUniqueChar = { bg = colors.tertiary, fg = colors.on_tertiary, bold = true },
    LightspeedUnlabeledMatch = { fg = colors.primary, bold = true },
    
    -- Copilot
    CopilotAnnotation = { fg = colors.outline, italic = true },
    CopilotSuggestion = { fg = colors.outline, italic = true },
    
    -- CMP
    CmpDocumentation = { fg = colors.on_surface, bg = colors.surface_container },
    CmpDocumentationBorder = { fg = colors.outline_variant, bg = colors.surface_container },
    CmpGhostText = { fg = colors.outline, italic = true },
    
    CmpItemAbbr = { fg = colors.on_surface },
    CmpItemAbbrDeprecated = { fg = colors.outline, strikethrough = true },
    CmpItemAbbrMatch = { fg = colors.primary, bold = true },
    CmpItemAbbrMatchFuzzy = { fg = colors.primary, bold = true },
    
    CmpItemMenu = { fg = colors.outline },
    
    CmpItemKindVariable = { fg = colors.on_surface },
    CmpItemKindInterface = { fg = colors.secondary },
    CmpItemKindText = { fg = colors.on_surface },
    CmpItemKindFunction = { fg = colors.primary },
    CmpItemKindMethod = { fg = colors.primary },
    CmpItemKindKeyword = { fg = colors.primary },
    CmpItemKindProperty = { fg = colors.on_surface_variant },
    CmpItemKindUnit = { fg = colors.secondary },
    CmpItemKindClass = { fg = colors.secondary },
    CmpItemKindModule = { fg = colors.secondary },
    CmpItemKindConstant = { fg = colors.secondary },
    CmpItemKindConstructor = { fg = colors.secondary },
    CmpItemKindReference = { fg = colors.tertiary },
    CmpItemKindEnum = { fg = colors.secondary },
    CmpItemKindFile = { fg = colors.on_surface },
    CmpItemKindFolder = { fg = colors.primary },
    CmpItemKindSnippet = { fg = colors.tertiary },
    CmpItemKindOperator = { fg = colors.on_surface_variant },
    CmpItemKindTypeParameter = { fg = colors.secondary },
    CmpItemKindField = { fg = colors.on_surface_variant },
    CmpItemKindEvent = { fg = colors.tertiary },
    CmpItemKindValue = { fg = colors.secondary },
    CmpItemKindStruct = { fg = colors.secondary },
  }

  -- Apply highlights
  for group, spec in pairs(highlights) do
    vim.api.nvim_set_hl(0, group, spec)
  end
end

M.setup()
return M
